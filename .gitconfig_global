[user]
    name = David Cain
    email = davidjosephcain@gmail.com
    signingkey = 8D4C4ABF1EA02DC1
[color]
    ui = true
[merge]
    tool = vimdiff
[diff]
    tool = vimdiff
[difftool]
    prompt = false
[core]
    excludesfile = ~/.gitignore
    whitespace = trailing-space,space-before-tab
    autocrlf = input
    editor = /usr/bin/env vim
    pager = ${GIT_PAGER:-less}
[alias]
    # Meta
    finda = "!grepalias() { git config --global --get-regexp alias | grep -i \"$1\" | awk -v nr=2 '{sub(/^alias\\./,\"\")};{printf \"\\033[31m%_10s\\033[1;37m\", $1};{sep=FS};{for (x=nr; x<=NF; x++) {printf \"%s%s\", sep, $x; }; print \"\\033[0;39m\"}'; }; grepalias"

    # General
    bl  = blame
    ci  = commit
    cia = commit --amend
    co  = checkout
    cob = checkout -b
    cp  = cherry-pick
    cpc = cherry-pick --continue
    rh  = reset --hard
    st  = status
    sb  = status -sb

    # Remote branches
    f   = fetch --prune
    rho = reset --hard origin/master

    # Pushing
    please = push --force-with-lease

    # Branching
    br = branch
    dm = !sh -c 'git branch --merged | grep -v \"^\\s*master$\" | grep -v \"\\*\" | xargs -n 1 git branch -d'

    # Diffs
    d = diff
    u = diff -w --word-diff=color
    staged = diff --cached

    # Logging
    la = log --pretty=tformat:'%C(magenta)%h%C(reset)%C(red)%d%C(reset) %s [%C(bold blue)%an%C(reset) %C(cyan)%ar%C(reset)]' --graph -p
    lo = log --pretty=tformat:'%C(magenta)%h%C(reset)%C(red)%d%C(reset) %s [%C(bold blue)%an%C(reset) %C(cyan)%ar%C(reset)]'
    lg = log --pretty=tformat:'%C(magenta)%h%C(reset)%C(red)%d%C(reset) %s [%C(bold blue)%an%C(reset) %C(cyan)%ar%C(reset)]' --graph
    mylog = !git log --raw --author=\"$(git config user.name)\"
    wh = log --raw --no-merges
    wp = log --raw --no-merges -p
    wu = log --raw --no-merges -p -w --word-diff=color

    # Rebasing
    r = rebase
    ra = rebase --abort
    ri = rebase --interactive
    rc = rebase --continue
    fix = "!quickfix() { git commit --no-verify --fixup=\"$1\" && git diff --quiet --exit-code && git rebase --autosquash --interactive \"$1\"^; }; quickfix"

    # Staging
    a  = add
    ap = add -p
    ignore = update-index --assume-unchanged
    heed   = update-index --no-assume-unchanged

    # Searching
    g = grep --break --heading --line-number  # Group things together like ack

    # Stashes
    # (No shortcut for plain `stash`, since it's too similar to status)
    sp  = stash pop
    ss  = stash show
    ssp = stash show -p
    sd  = stash drop
    sl  = stash list

    # Tags
    ft = fetch --tags
    pt = push --tags

    # submodules
    su = submodule update

    # Miscellaneous custom commands
    root = rev-parse --show-toplevel
    #delete = !~/gitfiles/git-rm-history.sh
    ctags = !.git/hooks/ctags
    undo = !git show | git apply -R
    copy = "!/bin/bash -c \"git show -s --format=%B \"$@\" | tee >(pbcopy) >(which -s tmux && tmux info &> /dev/null && tmux loadb -)\""

    # Substitute a string across all files tracked in Git (e.g. `git sed improt import`)
    # (Piping all tracked files to `sed -i` will update timestamps & may change newlines)
    sed = "!git grep -z --full-name -l \"$1\" | LANG=C xargs -0 sed -i '' -e \"s/$1/$2/g\" #"

[branch]
    autosetupmerge = true
[rerere]
    enabled = true
[advice]
    statusHints = false

# Work locally in spaces on a repository that's tabbed
[filter "indent"]
    clean = unexpand --tabs=4 --first-only
    smudge = expand --tabs=4 --initial

# Force the use of spaces
[filter "detab"]
    clean = expand --tabs=4 --initial  # Expand tabs to spaces
    smudge = cat  # Take file back (with spaces)
[push]
    default = simple
[grep]
    linenumber = true
[init]
    templatedir = ~/.git_template
[commit]
    gpgsign = true
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
[color "diff"]
    meta = yellow
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse
[diff-so-fancy]
    markEmptyLines = false
[rebase]
	autosquash = true
